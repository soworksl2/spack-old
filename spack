#!/bin/bash

# wrapper script to multiple archiver or compression tools
#
# Author: Soworksl
# License: GNU General Public License v3.0 (GPLv3)
# Repository: https://github.com/soworksl2/spack



# Declaring all the tools and extensions supported by this script.
# We have three arrays: ARCHIVER, COMPRESSION, and ENCRYPTION.
#
# STRUCTURE:
# It is a 2-dimensional array. The first dimension is denoted by the string key, 
# and the second by a string separated by spaces. 
# For each tool:
# - The first value is the tool to compress or create.
# - The second value is the tool to decompress or extract.
# - The remaining values are the supported extensions.
#
# EXTENSIONS:
# Extensions have metadata indicating other implicit tools.
# For example, `tgz` is for `gzip` but also for `tar`. 
# Metadata goes before the extension, between `:`. For example: `:metadata:ext`.
# Multiple metadata entries can be used, e.g., `:metadata1:metadata2:ext`. 
# Each metadata entry overwrites the one before if necessary.
# 
# METADATA FORMAT:
# Metadata consists of a letter indicating the group followed the key of the tool:
# - `a` = ARCHIVER
# - `c` = COMPRESSION
# - `e` = ENCRYPTION
# - `A` = All groups
# 
# Example: `:atar:tgz` means `tgz` uses the `tar` tool in the ARCHIVER group.
# if `A` then the tool is used for all for example `:Arar:rar` will use rar
# for archiving, compresing, and encription.
declare -A ARCHIVER_TOOLS
ARCHIVER_TOOLS[tar]="tar tar tar"

declare -A COMPRESSION_TOOLS
COMPRESSION_TOOLS[gzip]="gzip gzip gzip gz :atar:tgz"
COMPRESSION_TOOLS[xz]="xz xz xz :atar:txz"
COMPRESSION_TOOLS[bzip2]="bzip2 bzip2 bzip2 bzip bz2 :atar:tbz2 :atar:tbzip :atar:tbzip2"
COMPRESSION_TOOLS[zstd]="zstd zstd zstd zst :atar:tzstd :atar:tzst"
COMPRESSION_TOOLS[rar]="rar unrar :Arar:rar"
COMPRESSION_TOOLS[zip]="zip unzip :Azip:zip"
COMPRESSION_TOOLS[7z]="7z 7z :A7z:7z"


print_usage() {
    echo "spack {OPERATION} [-o output_dest] [OPTIONS..]"
}

print_help() {
    print_usage
    echo
    echo "GLOBAL OPTIONS:"
    echo "    -h, --help"
    echo "        Displays this help message."
    echo "    --version"
    echo "        Displays the version of this tool."

    echo
    echo "OPERATIONS:"
    echo "    -c, --compress"
    echo "        Compresses all specified files into the file defined with the -o option."

    echo
    echo "OPTIONS:"
    echo "    --format <FORMAT>"
    echo "        Specifies the format of the compressed file."
    echo "        - For the -c (compress) operation: defines the format of the output file."
    echo "        - For the -d (decompress) operation: defines the format of the input file."
    echo "    -o, --output <PATH>"
    echo "        Specifies the output path for the operation."
    echo "        - For the -c (compress) operation: required and specifies the output compressed file."
    echo "        - For the -d (decompress) operation: specifies the directory where files will be decompressed."
    echo "          Defaults to '[pwd]/[file_name_without_extensions]/' if not specified."
    echo "    --dry"
    echo "        Executes all logic except for decompression and compression operations. When this option is used, the script will not modify any files on the disk. This is intended to be used in conjunction with the --informative option."
    echo "    --informative"
    echo "        Outputs detailed information about the current execution process."
}


err() {
    local -a messages=("$@")

    local RED="\033[31m"
    local RESET="\033[0m"
    IFS=" "
    echo -e "${RED}ERROR:${RESET} ${messages[*]}" >&2
}

ensure_tool() {
    local tool="$1"

    if ! command -v "${tool}" &> /dev/null; then
        err "the tool (${tool}) is necessary"
        exit 1
    fi
}

are_all_none() {
    local -a vars=("$@")

    for var in "${vars[@]}"; do
        if ! [[ "${var}" == ""none ]]; then
            return 1
        fi
    done
    return 0
}


process_meta_data() {
    local meta_data="$1"
    local -n psd__implicit_archiver_ref="$2"

    local meta="${meta_data:0:1}"
    local key="${meta_data:1}"

    case "${meta}" in
        a)
            psd__implicit_archiver_ref="${key}"
            ;;
        A)
            psd__implicit_archiver_ref="${key}"
            ;;
        *)
            err "':${meta}${key}:' is not a valid meta ext"
            exit 1
    esac
}

extract_data_from_ext() {
    local -n esdfe__ext_ref="$1"
    local -n esdfe__meta_data_ref="$2"
    local ext_data="$3"

    ext_data="${ext_data:1}" #remove prefix colon (:)
    local -a components
    IFS=':' read -ra components <<< "${ext_data}"
    esdfe__meta_data_ref=("${components[@]::${#components[@]} - 1}")
    esdfe__ext_ref="${components[-1]}"
}

extract_ext_data() {
    local ext_data="$1"
    local -n ext_ref="$2"
    local -n implicit_archiver_ref="$3"

    if ! [[ "${ext_data:0:1}" == ":" ]]; then
        ext_ref="${ext_data}"
        return
    fi

    local -a data
    extract_data_from_ext ext_ref data "${ext_data}"
    for data_part in "${data[@]}"; do
        process_meta_data "${data_part}" implicit_archiver_ref
    done
}

get_archiver_format() {
    local part="$1"
    local -n gaf__archiver_fmt_ref="$2"

    if [[ "${part}" == "tar" ]]; then
        gaf__archiver_fmt_ref="tar"
    fi
}

get_compression_format() {
    local archiver_part="$1"
    local compression_part="$2"
    local -n gcf__archiver_fmt_ref="$3"
    local -n gcf__compression_fmt_ref="$4"

    if [[ -z "${compression_part}" ]]; then
        return 1;
    fi

    for compression_tool_key in "${!COMPRESSION_TOOLS[@]}"; do
        local -a tool_data
        IFS=" " read -ra tool_data <<< "${COMPRESSION_TOOLS["${compression_tool_key}"]}"
        tool_data=("${tool_data[@]:2}") #remove the compress and uncompress tools
        for ext_data in "${tool_data[@]}"; do
            local ext=
            local implicit_archiver=
            extract_ext_data "${ext_data}" ext implicit_archiver
            if [[ "${ext}" == "${compression_part}" ]]; then
                gcf__compression_fmt_ref="${compression_tool_key}"
                if [[ -n "${implicit_archiver}" ]]; then
                    gcf__archiver_fmt_ref="${implicit_archiver}"
                else
                    get_archiver_format "${archiver_part}" gcf__archiver_fmt_ref
                fi
                return 0
            fi
        done
    done

    return 1
}

get_archiver_part() {
    local part="$1"
    local -n gap__archiver_fmt_ref="$2"

    for archiver_tool_key in "${!ARCHIVER_TOOLS[@]}"; do
        local -a tool_exts
        for ext in "${tool_exts}"; do
            if test "${part}" = "${ext}"; then
                gap__archiver_fmt_ref="${archiver_tool_key}"
                return 0
            fi
        done
    done
    return 1
}

get_formats_individually() {
    local format_filename="$1"
    local -n archiver_fmt_ref="$2"
    local -n compression_fmt_ref="$3"

    #if nothing is encounter set all as none by default
    archiver_fmt_ref="none"
    compression_fmt_ref="none"

    local -a fmt_parts
    IFS='.' read -ra fmt_parts <<< "${format_filename}"
    fmt_parts=("${fmt_parts[@]:1}") #remove filename to only get extensions

    local ext3="${fmt_parts[-1]}"
    local ext2=
    local ext1=
    [[ "${#fmt_parts[@]}" -gt 1 ]] && ext2="${fmt_parts[-2]}" #try set ext2
    [[ "${#fmt_parts[@]}" -gt 2 ]] && ext1="${fmt_parts[-3]}" #try set ext1

    get_compression_format "${ext2}" "${ext3}" \
                            archiver_fmt_ref compression_fmt_ref || \
    get_archiver_format "${ext3}" archiver_fmt_ref
}

get_archiver_cmd() {
    local archiver_fmt="$1"

    case "${archiver_fmt}" in
        "tar")
            ensure_tool tar
            echo "tar_cmd"
        ;;
        "none")
            echo "archiver_none_cmd"
        ;;
        *)
            echo "err"
        ;;
    esac
}

tar_cmd() {
    local -a files=("$@")

    tar -cf "${tmp_compression_file}" "${files[@]}"
}

archiver_none_cmd() {
    local file="$1"
    cp "${file}" "${tmp_compression_file}"
}

get_compression_cmd() {
    local compression_fmt="$1"

    case "${compression_fmt}" in
        "gzip")
            ensure_tool gzip
            echo "gzip_cmd"
        ;;
        "xz")
            ensure_tool xz
            echo "xz_cmd"
        ;;
        "bzip2")
            ensure_tool bzip2
            echo "bzip2_cmd"
        ;;
        "zstd")
            ensure_tool zstd
            echo "zstd_cmd"
        ;;
        "none")
            echo "compression_none_cmd"
        ;;
        *)
            echo "err"
        ;;
    esac
}

gzip_cmd() {
    gzip "${tmp_compression_file}" -S .gz --verbose
    tmp_compression_file="${tmp_compression_file}.gz"
}

xz_cmd() {
    xz -zS .xz "${tmp_compression_file}" --verbose
    tmp_compression_file="${tmp_compression_file}.xz"
}

bzip2_cmd() {
    bzip2 -z "${tmp_compression_file}" --verbose
    tmp_compression_file="${tmp_compression_file}.bz2"
}

zstd_cmd() {
    zstd -z "${tmp_compression_file}" --rm --verbose
    tmp_compression_file="${tmp_compression_file}.zst"
}

compression_none_cmd() {
    : #well my bro, I guess I have nothing to do here ¯\_(o_o)_/¯
}


detect_format_filename() {
    local format="$1"
    local explicit_format_filename="$2"

    if [[ "${format}" == "auto" ]]; then
        echo "${explicit_format_filename}"
    else
        #TODO: fix trailing dot in some scenarios. example $format=.tgz
        echo "dumb_file.${format}"
    fi
}

compress_print_info() {
    local archiver_fmt="$1"
    local compression_fmt="$2"

    shift 2
    local -a files=("$@")

    echo "--informative"
    echo "operation: compression (-c)"
    echo "output file: ${SPACK_OUTPUT}"
    echo "archiver_fmt: ${archiver_fmt}"
    echo "compression_fmt: ${compression_fmt}"
    echo
    echo "Files to compress (${#files[@]}):"
    for file in "${files[@]}"; do
        echo "    ${file}"
    done
    echo "--end informative"
}

spack_compress() {
    local output="$1"
    local format_filename="$2"
    shift 2
    local files=("$@")


    if [[ "${output}" == "auto" ]]; then
        err "you need to specify the output for the compression file"
        exit 1
    fi

    format_filename="$(detect_format_filename "${format_filename}" "${output}")"
    
    local archiver_fmt
    local compression_fmt

    get_formats_individually ${format_filename} archiver_fmt compression_fmt

    if [[ "${SPACK_INFORMATIVE}" == "true" ]]; then
        compress_print_info "${archiver_fmt}" "${compression_fmt}" "${files[@]}"
    fi

    if [[ "${SPACK_DRY}" == "true" ]]; then
        return
    fi

    if are_all_none "${archiver_fmt}" "${compression_fmt}"; then
        err "no tools was detected by the extensions. use --format if needed"
        exit 1
    fi

    if [[ "${#files[@]}" -eq "0" ]]; then
        err "no files was specified to compress"
        exit 1
    fi

    if [[ "${archiver_fmt}" = "none" ]]; then
        if [[ "${#files[@]}" -gt 1 ]]; then
            err "Multiple files cannot be processed without an archiving tool."
            exit 1
        fi

        if [[ -d "${files[0]}" ]]; then
            err "'${files[0]}' is a directory and cannot be processed without an archiving tool"
            exit 1
        fi
    fi

    local archiver_cmd=$(get_archiver_cmd "${archiver_fmt}")
    local compression_cmd=$(get_compression_cmd "${compression_fmt}")

    if [[ "${archiver_cmd}" == "err" ]]; then
        err "${archiver_fmt} is an invalid format or not supported"
        exit 1
    fi

    if [[ "${compression_cmd}" == "err" ]]; then
        err "${compression_fmt} is an invalid format or not supported"
        exit 1
    fi

    tmp_compression_file="~tmp_compression"

    echo "--[[STEP 1: ${archiver_fmt}]]--"
    ${archiver_cmd} "${files[@]}"
    echo "    completed..."
    echo "--[[STEP 2: ${compression_fmt}]]--"
    ${compression_cmd} "${files[@]}"
    echo "    completed..."

    mv "${tmp_compression_file}" "${SPACK_OUTPUT}"
}

#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# parsing arguments
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

plain_args=("$@")
TEMP=$(getopt \
        -o "hco:" \
        -l "help,version,compress,format:,output:,dry,informative" \
        -- "$@")

if [[ "$?" -ne "0" ]]; then
    echo "error parsing arguments" >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP


SPACK_REPOSITORY="https://github.com/soworksl2/spack"
SPACK_VERSION=0.0.1
SPACK_OPERATION=

SPACK_FORMAT=auto
SPACK_OUTPUT=auto

SPACK_DRY=false
SPACK_INFORMATIVE=false

while true; do
    case "$1" in
        "-h"|"--help")
            print_help
            exit 0
        ;;
        "--version")
            echo "spack version (${SPACK_VERSION})"
            echo "github: ${SPACK_REPOSITORY}"
            exit 0
        ;;

        #OPERATIONS
        "-c"|"--compress")
            if test -n "${SPACK_OPERATION}"; then
                echo "ERROR: two or more operation was specified" >&2
                exit 1
            fi

            SPACK_OPERATION="c"
            shift
        ;;

        #OPTIONS
        "-o"|"--output")
            SPACK_OUTPUT="$2"
            shift 2            
        ;;
        "--format")
            SPACK_FORMAT="$2"
            shift 2
        ;;
        "--dry")
            SPACK_DRY=true
            shift
        ;;
        "--informative")
            SPACK_INFORMATIVE=true
            shift
        ;;
        "--")
            shift
            break
        ;;
        *)
            echo "fuck!" >&2
            exit 1
        ;;
    esac
done


#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# runtime
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

if [[ -z "${SPACK_OPERATION}" ]]; then
    err "no operation specified"
    exit 1
fi

case "${SPACK_OPERATION}" in
    "c") spack_compress "${SPACK_OUTPUT}" "${SPACK_FORMAT}" "$@" ;;
    *)
        err "operation '${SPACK_OPERATION}' is invalid"
        exit 1
        ;;
esac
