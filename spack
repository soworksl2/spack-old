#!/bin/bash

function print_usage {
    echo "spack {OPERATION} [-o output_dest] [OPTIONS..]"
}

function print_help {
    print_usage
    echo
    echo "GLOBAL OPTIONS:"
    echo "    -h, --help"
    echo "        Displays this help message."
    echo "    --version"
    echo "        Displays the version of this tool."

    echo
    echo "OPERATIONS:"
    echo "    -c, --compress"
    echo "        Compresses all specified files into the file defined with the -o option."

    echo
    echo "OPTIONS:"
    echo "    --format <FORMAT>"
    echo "        Specifies the format of the compressed file."
    echo "        - For the -c (compress) operation: defines the format of the output file."
    echo "        - For the -d (decompress) operation: defines the format of the input file."
    echo "    -o, --output <PATH>"
    echo "        Specifies the output path for the operation."
    echo "        - For the -c (compress) operation: required and specifies the output compressed file."
    echo "        - For the -d (decompress) operation: specifies the directory where files will be decompressed."
    echo "          Defaults to '[pwd]/[file_name_without_extensions]/' if not specified."
    echo "    --dry"
    echo "        Executes all logic except for decompression and compression operations. When this option is used, the script will not modify any files on the disk. This is intended to be used in conjunction with the --informative option."
    echo "    --informative"
    echo "        Outputs detailed information about the current execution process."
}


function ensure_tool {
    local tool="$1"

    if ! command -v "${tool}" &> /dev/null; then
        echo "ERROR: the tool (${tool}) is necessary" >&2
        exit 1
    fi
}

function are_all_none {
    local -a vars=("$@")

    for var in "${vars[@]}"; do
        if ! test "${var}" = "none"; then
            return 1
        fi
    done
    return 0
}

function process_special_data {
    local special="$1"
    local -n psd__implicit_archiver_ref="$2"

    local meta="${special:0:1}"
    local key="${special:1}"

    case "${meta}" in
        a)
            psd__implicit_archiver_ref="${key}"
            ;;
        A)
            psd__implicit_archiver_ref="${key}"
            ;;
        *)
            echo "ERROR: ':${meta}${key}:' is not a valid meta ext" >&2
            exit 1
    esac
}

function extract_special_data_from_ext {
    local -n esdfe__ext_ref="$1"
    local -n esdfe__special_data_ref="$2"
    local ext_data="$3"

    ext_data="${ext_data:1}" #remove prefix colon (:)
    local -a components
    IFS=':' read -ra components <<< "${ext_data}"
    esdfe__special_data_ref=("${components[@]::${#components[@]} - 1}")
    esdfe__ext_ref="${components[-1]}"
}

function get_ext_data {
    local ext_data="$1"
    local -n ext_ref="$2"
    local -n implicit_archiver_ref="$3"

    if ! test "${ext_data:0:1}" = ":"; then
        ext_ref="${ext_data}"
        return
    fi

    local -a special_data
    extract_special_data_from_ext ext_ref special_data "${ext_data}"
    for special in "${special_data[@]}"; do
        process_special_data "${special}" implicit_archiver_ref
    done
}

function get_tool_exts {
    local tool_key="$1"
    local -n tools_arr_ref="$2"
    local -n tool_ext_ref="$3"

    local -a exts
    IFS=' ' read -ra exts <<< "${tools_arr_ref[${tool_key}]}"
    tool_ext_ref=("${exts[@]:2}")
}

function get_archiver_format {
    local part="$1"
    local -n gaf__archiver_fmt_ref="$2"

    if test "${part}" = "tar"; then
        gaf__archiver_fmt_ref="tar"
    fi
}

function get_compression_format {
    local part2="$1"
    local part="$2"
    local -n gcf__archiver_fmt_ref="$3"
    local -n gcf__compression_fmt_ref="$4"

    for compression_tool_key in "${!COMPRESSION_TOOLS[@]}"; do
        local -a tool_exts
        get_tool_exts "${compression_tool_key}" COMPRESSION_TOOLS tool_exts
        for ext_data in "${tool_exts[@]}"; do
            local ext=
            local implicit_archiver=
            get_ext_data "${ext_data}" ext implicit_archiver
            if test "${ext}" = "${part}"; then
                gcf__compression_fmt_ref="${compression_tool_key}"
                if test -n "${implicit_archiver}"; then
                    gcf__archiver_fmt_ref="${implicit_archiver}"
                else
                    get_archiver_format "${part2}" gcf__archiver_fmt_ref
                fi
                return 0
            fi
        done
    done

    return 1
}

function get_archiver_part {
    local part="$1"
    local -n gap__archiver_fmt_ref="$2"

    for archiver_tool_key in "${!ARCHIVER_TOOLS[@]}"; do
        local -a tool_exts
        get_tool_exts "${archiver_tool_key}" ARCHIVER_TOOLS tool_exts
        for ext in "${tool_exts}"; do
            if test "${part}" = "${ext}"; then
                gap__archiver_fmt_ref="${archiver_tool_key}"
                return 0
            fi
        done
    done
    return 1
}

function get_formats_individually {
    local format="$1"
    local -n archiver_fmt_ref="$2"
    local -n compression_fmt_ref="$3"
    #if nothing is encounter set all as none by default
    archiver_fmt_ref="none"
    compression_fmt_ref="none"

    local -a fmt_parts

    IFS='.' read -ra fmt_parts <<< "${format}"
    for (( i=${#fmt_parts[@]}-1 ; i>=1 ; i-- )) ; do
        local ext="${fmt_parts[i]}"
        local ext2=
        local ext3=

        if test ${i} -gt 1; then
            ext2="${fmt_parts[i-1]}"
        fi
        if test ${i} -gt 2; then
            ext3="${fmt_parts[i-2]}"
        fi

        if get_compression_format "${ext2}" "${ext}" archiver_fmt_ref compression_fmt_ref; then
            return
        else
            get_archiver_part "${ext}" archiver_fmt_ref
            return
        fi
        #if is_compression_part "${ext}"; then
        #    get_compression_format "${ext2}" "${ext}" archiver_fmt_ref compression_fmt_ref
        #    return
        #elif is_archiver_part "${ext}"; then
        #    get_archiver_format "${ext}" archiver_fmt_ref
        #    return
        #fi
    done
}

function spack_compress_info {
    local archiver_fmt="$1"
    local compression_fmt="$2"

    shift 2
    local -a files=("$@")

    echo "operation: compression (-c)"
    echo "output file: ${SPACK_OUTPUT}"
    echo "archiver_fmt: ${archiver_fmt}"
    echo "compression_fmt: ${compression_fmt}"
    echo
    echo "Files to compress (${#files[@]}):"
    for file in "${files[@]}"; do
        echo "    ${file}"
    done
}

function spack_compress {
    local output="$1"
    local format="$2"
    shift 2
    local files=("$@")
    
    local archiver_fmt
    local compression_fmt

    get_formats_individually ${format} archiver_fmt compression_fmt

    if test "${SPACK_INFORMATIVE}" = true; then
        echo "--informative"
        spack_compress_info "${archiver_fmt}" "${compression_fmt}" "${files[@]}"
        echo "--end informative"
    fi

    if test "${SPACK_DRY}" = true; then
        return
    fi

    if are_all_none "${archiver_fmt}" "${compression_fmt}"; then
        echo "ERROR: no tools was detected by the extensions. use --format if needed" >&2
        exit 1
    fi

    if test "${#files[@]}" -eq "0"; then
        echo "ERROR: no files was specified to compress" >&2
        exit 1
    fi

    local archiver_cmd=
    local compression_cmd=
}


declare -A ARCHIVER_TOOLS
ARCHIVER_TOOLS[tar]="tar tar tar"

declare -A COMPRESSION_TOOLS
COMPRESSION_TOOLS[gzip]="gzip gzip gzip gz :atar:tgz"
COMPRESSION_TOOLS[xz]="xz xz xz :atar:txz"
COMPRESSION_TOOLS[bzip2]="bzip2 bzip2 bzip2 bzip bz2 :atar:tbz2 :atar:tbzip :atar:tbzip2"
COMPRESSION_TOOLS[zstd]="zstd zstd zstd zst :atar:tzstd :atar:tzst"
COMPRESSION_TOOLS[rar]="rar unrar :Arar:rar"
COMPRESSION_TOOLS[zip]="zip unzip :Azip:zip"
COMPRESSION_TOOLS[7z]="7z 7z :A7z:7z"

#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


plain_args=("$@")
TEMP=$(getopt -o "hco:" -l "help,version,compress,format:,output:,dry,informative" -- "$@")

if test "$?" -ne "0"; then
    echo "error parsing arguments" >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP


#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# parsing arguments
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

SPACK_REPOSITORY="https://github.com/soworksl2/spack"
SPACK_VERSION=0.0.1
SPACK_OPERATION=

SPACK_FORMAT=auto
SPACK_OUTPUT=auto

SPACK_DRY=false
SPACK_INFORMATIVE=false

while true; do
    case "$1" in
        "-h"|"--help")
            print_help
            exit 0
        ;;
        "--version")
            echo "spack version (${SPACK_VERSION})"
            echo "github: ${SPACK_REPOSITORY}"
            exit 0
        ;;

        #OPERATIONS
        "-c"|"--compress")
            if test -n "${SPACK_OPERATION}"; then
                echo "ERROR: two or more operation was specified" >&2
                exit 1
            fi

            SPACK_OPERATION="c"
            shift
        ;;

        #OPTIONS
        "-o"|"--output")
            SPACK_OUTPUT="$2"
            shift 2            
        ;;
        "--format")
            SPACK_FORMAT="$2"
            shift 2
        ;;
        "--dry")
            SPACK_DRY=true
            shift
        ;;
        "--informative")
            SPACK_INFORMATIVE=true
            shift
        ;;
        "--")
            shift
            break
        ;;
        *)
            echo "fuck!" >&2
            exit 1
        ;;
    esac
done


#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# runtime
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

if test -z "$SPACK_OPERATION"; then
    echo "ERROR: no operation specified" >&2
    exit 1
fi

case "${SPACK_OPERATION}" in
    "c")
        if test "${SPACK_OUTPUT}" = "auto"; then
            echo "ERROR: you need to specify the output for the compression file" >&2 
            exit 1
        fi
        if test "${SPACK_FORMAT}" = "auto"; then
            SPACK_FORMAT="${SPACK_OUTPUT}"
        else
            SPACK_FORMAT="dumb_file.${SPACK_FORMAT}"
        fi
        spack_compress "${SPACK_OUTPUT}" "${SPACK_FORMAT}" "$@"
    ;;
    *)
        echo "ERROR: operation is invalid" >&2
        exit 1
    ;;
esac
