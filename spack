#!/bin/bash

function print_usage {
    echo "spack {OPERATION} [-o output_dest] [OPTIONS..]"
}

function print_help {
    print_usage
    echo
    echo "GLOBAL OPTIONS:"
    echo "    -h, --help"
    echo "        shows this help message"
    echo "    --version"
    echo "        shows the version of this tool"

    echo
    echo "OPERATIONS:"
    echo "    -c, --compress"
    echo "        compress all the passed file into the file specified with the -o option"

    echo
    echo "OPTIONS:"
    echo "    --format"
    echo "        specifies the format of the compressed file, if is -c operation the format is for the output file, if -d then it will be the passed file"
    echo "    -o, --output"
    echo "        the output of the operation. if -c is the compressed file, if -d is the directory where to decompressed"
}


function ensure_tool {
    local tool="$1"

    if ! command -v "${tool}" &> /dev/null; then
        echo "ERROR: the tool (${tool}) is necessary" >&2
        exit 1
    fi
}


function is_compression_part {
    local part="$1"
    local -a compression_extensions=(
        gzip gz tgz
        xz txz
        bzip2 bz2 bz tbz2 tbz
        zstd zst tzstd tzst
        #TODO: these should be handled in is_encription_part because these tools support encription
        #but encription is not implemented yet so they are handled here
        7z rar zip
    )

    for comp_ext in "${compression_extensions[@]}"; do
        if test "${comp_ext}" = "${part}"; then
            return 0
        fi
    done
    return 1
}

function is_archiver_part {
    local part="$1"

    if test "${part}" = "tar"; then
        return 0
    fi
    return 1
}

function get_archiver_format {
    local part="$1"
    local -n gaf__archiver_fmt_ref="$2"

    if test "${part}" = "tar"; then
        gaf__archiver_fmt_ref="tar"
    fi
}

function get_compression_format {
    local part2="$1"
    local part="$2"
    local -n gcf__archiver_fmt_ref="$3"
    local -n gcf__compression_fmt_ref="$4"

    local implicit_archiver=

    case "${part}" in
        gzip|gz|tgz)
            gcf__compression_fmt_ref="gzip"
            if test "${part}" = "tgz"; then
                implicit_archiver="tar"
            fi
        ;;
        xz|txz)
            gcf__compression_fmt_ref="xz"
            if test "${part}" = "txz"; then
                implicit_archiver="tar"
            fi
        ;; 
        bz2|bz|tbz2|tbz)
            gcf__compression_fmt_ref="bzip2"
            if test "${part:0:1}" = "t"; then
                implicit_archiver="tar"
            fi
        ;;
        zstd|zst|tzstd|tzst)
            gcf__compression_fmt_ref="zstd"
            if test "${part:0:1}" = "t"; then
                implicit_archiver="tar"
            fi
        ;;
        7z)
            gcf__compression_fmt_ref="7z"
            implicit_archiver="7z"
        ;;
        rar)
            gcf__compression_fmt_ref="rar"
            implicit_archiver="rar"
        ;;
        zip)
            gcf__compression_fmt_ref="zip"
            implicit_archiver="zip"
        ;;
    esac

    if test -z "${implicit_archiver}"; then
        get_archiver_format "${part2}" gcf__archiver_fmt_ref
    else
        gcf__archiver_fmt_ref="${implicit_archiver}"
    fi
}

function get_formats_individually {
    local format="$1"
    local -n archiver_fmt_ref="$2"
    local -n compression_fmt_ref="$3"

    local -a fmt_parts

    IFS='.' read -ra fmt_parts <<< "${format}"
    for (( i=${#fmt_parts[@]}-1 ; i>=1 ; i-- )) ; do
        local ext="${fmt_parts[i]}"
        local ext2=
        local ext3=

        if test ${i} -gt 1; then
            ext2="${fmt_parts[i-1]}"
        fi
        if test ${i} -gt 2; then
            ext3="${fmt_parts[i-2]}"
        fi

        if is_compression_part "${ext}"; then
            local pre_ext1=
            get_compression_format "${ext2}" "${ext}" archiver_fmt_ref compression_fmt_ref
            return
        elif is_archiver_part "${ext}"; then
            get_archiver_format "${ext}" archiver_fmt_ref
            return
        fi
    done
    #if nothing is encounter set all as none
    archiver_fmt_ref="none"
    compression_fmt_ref="none"
}

function spack_compress {
    local output="$1"
    local format="$2"
    shift 2
    local files=("$@")
    
    local archiver_fmt
    local compression_fmt

    get_formats_individually ${format} archiver_fmt compression_fmt

    echo "archiver_fmt: ${archiver_fmt}"
    echo "compression_fmt: ${compression_fmt}"

    local archiver_cmd=
    local compression_cmd=
}

#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


plain_args=("$@")
TEMP=$(getopt -o "hco:" -l "help,version,compress,format:,output:" -- "$@")

if test "$?" -ne "0"; then
    echo "error parsing arguments" >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP


#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# parsing arguments
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

SPACK_REPOSITORY="https://github.com/soworksl2/spack"
SPACK_VERSION=0.0.1
SPACK_OPERATION=

SPACK_FORMAT=auto
SPACK_OUTPUT=auto

while true; do
    case "$1" in
        "-h"|"--help")
            print_help
            exit 0
        ;;
        "--version")
            echo "spack version (${SPACK_VERSION})"
            echo "github: ${SPACK_REPOSITORY}"
            exit 0
        ;;

        #OPERATIONS
        "-c"|"--compress")
            if test -n "${SPACK_OPERATION}"; then
                echo "ERROR: two or more operation was specified" >&2
                exit 1
            fi

            SPACK_OPERATION="c"
            shift
        ;;

        #OPTIONS
        "-o"|"--output")
            SPACK_OUTPUT="$2"
            shift 2            
        ;;
        "--format")
            SPACK_FORMAT="$2"
            shift 2
        ;;
        "--")
            shift
            break
        ;;
        *)
            echo "fuck!" >&2
            exit 1
        ;;
    esac
done


#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# runtime
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

if test -z "$SPACK_OPERATION"; then
    echo "ERROR: no operation specified" >&2
    exit 1
fi

case "${SPACK_OPERATION}" in
    "c")
        if test "${SPACK_FORMAT}" = "auto"; then
            SPACK_FORMAT="dumb_file.tar.gz"
        fi
        spack_compress "${SPACK_OUTPUT}" "${SPACK_FORMAT}" "$@"
    ;;
    *)
        echo "ERROR: operation is invalid" >&2
        exit 1
    ;;
esac

#TODO: --format should be optional no mandatory, so you have to create an algorithm to detec the format automatically
